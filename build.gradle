plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'com.google.cloud.tools.jib' version '3.4.0'
}

group = 'com.hoon'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jib {
	from { /* BASE 이미지 */
		image = 'miroit/openjdk-17-alpine-tzdata'
	}
	to {
		image = 'docker.io/miroit/approval'

		tags = ['latest', '0.0']
		auth { /* 아이디 비밀번호 */
			username = project.property('dockerUserName')
			password = project.property('dockerPassWord')
		}

	}
	container {
		entrypoint = ['java', '-Dspring.profiles.active=dev', '-jar', project.name+'-'+project.version+'.jar']

		jvmFlags = ['-Xms512m', '-Xmx512m', '-Xdebug', '-XshowSettings:vm', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseContainerSupport']
		ports = ['8087']


		environment = [SPRING_OUTPUT_ANSI_ENABLED: "ALWAYS"]
		labels = [version: project.version, name: project.name, group: project.group]

		creationTime = 'USE_CURRENT_TIMESTAMP'
		format = 'Docker'
	}
	extraDirectories {
		paths {
			path {
				from = file('build/libs')
			}
		}
	}
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// querydsl 디펜던시 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'

	// spring security
	testImplementation 'org.springframework.security:spring-security-test'

	// okta 연동 spring security
	implementation 'com.okta.spring:okta-spring-boot-starter:3.0.5'


	// https://mvnrepository.com/artifact/org.json/json
	implementation 'org.json:json:20230618'
	// https://mvnrepository.com/artifact/commons-io/commons-io
	implementation 'commons-io:commons-io:2.11.0'


	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	implementation 'org.slf4j:slf4j-api'
	// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
	testImplementation 'ch.qos.logback:logback-classic'
	// https://mvnrepository.com/artifact/org.springframework/spring-aop
	implementation 'org.springframework:spring-aop'
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation 'org.apache.commons:commons-lang3'
	// request validation 어노테이션
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'com.auth0:java-jwt:4.3.0'


	// querydsl 로그(add Param)
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

	// 엑셀 처리 라이브러리 poi
	implementation 'org.apache.poi:poi:4.1.2'
	implementation 'org.apache.poi:poi-ooxml:4.1.2'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// postgresql
	implementation 'org.postgresql:postgresql:42.6.0'

	// RestTemplate PATCH, PUT method 사용 위해 추가
	// https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

	// https://mvnrepository.com/artifact/org.springframework.batch/spring-batch-core
	implementation 'org.springframework.batch:spring-batch-core:5.1.0'

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation 'com.google.code.gson:gson:2.8.9'

}

tasks.named('test') {
	useJUnitPlatform()
}
